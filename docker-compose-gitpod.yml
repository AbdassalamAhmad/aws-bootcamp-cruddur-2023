version: "3.9"
services:
  backend-flask:
    environment:
      AWS_ENDPOINT_URL: "http://dynamodb-local:8000"
      #PROD_CONNECTION_URL: "$PROD_CONNECTION_URL"
      CONNECTION_URL: "postgresql://postgres:password@db:5432/cruddur"
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      OTEL_SERVICE_NAME: 'backend-flask'
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      AWS_XRAY_URL: "*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      #AWS_XRAY_SDK_ENABLED: "False"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      ROLLBAR_ACCESS_TOKEN: "${ROLLBAR_ACCESS_TOKEN}"
      AWS_COGNITO_USER_POOL_ID: "eu-south-1_VVTlAbxEV"
      AWS_COGNITO_USER_POOL_CLIENT_ID: "7mph1qpebk969vkggt14g8l59d"
    build: ./backend-flask
    ports:
      - "4567:4567"
    # healthcheck: # will check URL every {interval} After {start_period} for number of {retries}
    #   test: wget --no-verbose --tries=1 --spider https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}/api/activities/home || exit 1 # if wget cmd failed, will execute {exit 1}
    #   interval: 20s # no. seconds between executing the health check after the start_period.
    #   retries: 2 # no. of consecutive checks that failed to declare unhealth container.
    #   start_period: 20s # no. of seconds before starting health checks.
    #   timeout: 5s # no. of seconds to wait for a health check to complete before considering it a failure.
    volumes:
      - ./backend-flask:/backend-flask
  
  frontend-react-js:
    environment:
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      REACT_APP_AWS_PROJECT_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_COGNITO_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_USER_POOLS_ID: "eu-south-1_VVTlAbxEV"
      REACT_APP_CLIENT_ID: "7mph1qpebk969vkggt14g8l59d"
    build:
      context: ./frontend-react-js
      dockerfile: Dockerfile.node-node
    ports:
      - "3000:3000"
    # healthcheck:
    #   test: curl --fail https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST} || exit 1
    #   interval: 30s
    #   retries: 3
    #   start_period: 30s
    #   timeout: 20s
    volumes:
      - ./frontend-react-js:/frontend-react-js

  xray-daemon:
    image: "amazon/aws-xray-daemon"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_REGION: "eu-south-1"
    command:
      - "xray -o -b xray-daemon:2000"
    ports:
      - 2000:2000/udp

  dynamodb-local:
    # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
    # We needed to add user:root to get this working.
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal

  db:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data


volumes:
  db:
    driver: local

# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks: 
  internal-network:
    driver: bridge
    name: cruddur

